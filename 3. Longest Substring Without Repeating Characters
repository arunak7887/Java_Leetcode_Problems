3. Longest Substring Without Repeating Characters
Given a string s, find the length of the longest 
substring without repeating characters.
Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
Constraints:
0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

OutPut:

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int count =0;
        for (int i=0; i< s.length(); i++){
            HashSet<Character> set = new HashSet<Character>(s.length());
            for (int j=i; j<s.length(); j++){
                if (!set.contains(s.charAt(j))){
                    set.add(s.charAt(j));
                }else {
                    break;
                }
            }
            count = Math.max(count, set.size());
        }
        return count;
    }
}


Explain:


The given Java code defines a class Solution with a method lengthOfLongestSubstring, which aims to find the length of the longest substring without repeating characters in a given string s.

Here's a breakdown of how the code works:

The method lengthOfLongestSubstring takes a string s as input and returns an integer, which represents the length of the longest substring without repeating characters.

It initializes a variable count to keep track of the length of the longest substring found so far.

The method iterates through each character in the string s using a nested loop. The outer loop (controlled by variable i) selects the starting point of a potential substring, and the inner loop (controlled by variable j) scans from the starting point to the end of the string.

Within the inner loop, a HashSet set is used to keep track of the characters encountered so far in the current substring being considered.

If the current character (s.charAt(j)) is not already present in the HashSet set, it is added to the HashSet using set.add(s.charAt(j)).

If the current character is already present in the HashSet, it means that the substring has a repeating character. Hence, the inner loop breaks, and the method moves on to the next potential substring.

After each inner loop completes, the length of the HashSet set (which represents the length of the substring without repeating characters) is compared with the current value of count, and the maximum of the two is stored in the variable count.

Finally, the method returns the value of count, which represents the length of the longest substring without repeating characters in the given string s.
